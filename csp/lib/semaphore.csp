module ModuleSignallingSemaphore(TypeThreadID)
  Signalling = 
    upChan?id ->
    Mutex

  Mutex =
    downChan?id1 ->
    upChan?id2 ->
    Mutex
  
  chanset = {|
    upChan, downChan
  |}

exports
  runWith(hide,P) = 
    if hide then (Signalling [| chanset |] P) \ chanset
    else Signalling [| chanset |] P
  
  channel upChan, downChan: TypeThreadID
endmodule


module ModuleMutexSemaphore(TypeThreadID)
  Mutex =
    downChan?id1 ->
    upChan?id2 ->
    Mutex
  
  chanset = {|
    upChan, downChan
  |}

exports
  runWith(hide,P) = 
    if hide then (Mutex [| chanset |] P) \ chanset
    else Mutex [| chanset |] P
  
  channel upChan, downChan: TypeThreadID
endmodule


module ModuleSemaphore(TypeThreadID, initialState)  
  --Raised
  Semaphore(cur) = if(cur) then downChan?id -> Semaphore(False)
                           else upChan?id   -> Semaphore(True)
  chanset = {|upChan, downChan|}
exports
  runWith(hide,P) = (Semaphore(initialState) [| chanset |] P) \ 
                    (if hide then chanset else {})
  channel upChan, downChan: TypeThreadID
endmodule