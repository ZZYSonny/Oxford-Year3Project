module ModuleMonitor(TypeThreadID, disableSpurious)
  channel
    Notify, NotifyAll, Exit, Wait,
    WaitNotify, WaitEnter,
    MonitorWake, SpuriousWake

  chanset = {|
    Notify, NotifyAll, Exit, Wait,
    WaitNotify, WaitEnter,
    MonitorWake, SpuriousWake
  |}

  active(nwaiting) = 
    --current running thread notify
    Notify -> (
      if nwaiting==0 then 
        --do nothing if no thread is waiting
        active(0)
      else
        --wakeup a process
        MonitorWake -> 
        active(nwaiting-1)
    ) []
    --current running thread notifyAll
    NotifyAll -> (
      repeatN(WaitEnter, nwaiting);
      active(0)
    ) []
    --current running thread exit
    Exit -> (
      inactive(nwaiting)
    ) []
    --current running thread wait
    Wait -> (
      inactive(nwaiting+1)
    ) []
    nwaiting>0 & SpuriousWake -> (
      active(nwaiting-1)
    )

  inactive(nwaiting) =
    WaitEnter -> (
      active(nwaiting-1)
    ) []
    nwaiting!=0 & SpuriousWake -> (
      inactive(nwaiting-1)
    )

exports
  runWith(hide,P) = 
    if hide then (inactive({}) [|chanset|] P) \ diff(chanset,{|SpuriousWake|})
    else inactive({}) [|chanset|] P

  --java-like synchronized function
  synchronized(me, P)=
    WaitEnter ->
    P;
    Exit ->
    SKIP

  --notify()
  notify(me) = 
    Notify ->
    SKIP

  --notifyAll()
  notifyAll(me) =
    NotifyAll ->
    SKIP

  --wait()
  wait(me) =
    Wait.me -> 
    if disableSpurious then (
        (WaitNotify.me -> WaitEnter.me -> SKIP)
      [] (SpuriousWake.me -> WaitEnter.me -> SKIP)
    ) else (
      (WaitNotify.me -> WaitEnter.me -> SKIP)
    )

  --while(cond) wait()
  --typeof(cond) = (ktrue, kfalse) -> Proc
  whileWait(me,cond) =
    while(cond)(wait(me)->SKIP)
endmodule