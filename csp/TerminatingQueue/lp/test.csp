include "common.csp"
include "../queue_abc.csp"
include "correct.csp"

instance Monitor=ModuleMonitor(TypeThread, False)

Spec1Thread=SpecT({T1},qNewQueue)
Spec2Thread=SpecT({T1,T2},qNewQueue)
Spec3Thread=SpecT({T1,T2,T3},qNewQueue)
Spec4Thread=SpecT({T1,T2,T3,T4},qNewQueue)
Spec5Thread=SpecT({T1,T2,T3,T4,T5},qNewQueue)


InputRegulatorA=
     enqLP?t?q!A -> InputRegulatorA
  [] enqLP?t?q!B -> InputRegulatorABC 
InputRegulatorABC=
     enqLP?t?q!C -> InputRegulatorABC

Thread(NThread,me)=
  (|~| x:TypeData @ 
    enqueue(NThread,me,x);Thread(NThread,me)
  ) |~| (
    dequeue(NThread,me);Thread(NThread,me)
  )
System(All)=runWith(True,True,
  --((||| me:All @ Thread(card(All),me)) \ {|Call,Return|})
  (||| me:All @ Thread(card(All),me))
    [|{|enqLP|}|] InputRegulatorA
)
SystemWithSpuriousEvent(All)=runWith(False,True,
  (||| me:All @ Thread(card(All),me)) 
    [|{|enqLP|}|] InputRegulatorA
)

--Trivial Simple Thread Case
System1=System({T1}) \ {|Call,Return|}
System2=System({T1,T2}) \ {|Call,Return|}
System3=System({T1,T2,T3}) \ {|Call,Return|}
System4=System({T1,T2,T3,T4}) \ {|Call,Return|}
System5=System({T1,T2,T3,T4,T5}) \ {|Call,Return|}

assert Spec1Thread [T= System1
assert Spec2Thread [T= System2
assert Spec3Thread [T= System3
assert Spec4Thread [T= System4
assert Spec5Thread [T= System5

assert SpecF({T1},qNewQueue) [F= System1