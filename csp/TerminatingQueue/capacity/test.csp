include "../common.csp"
include "queue.csp"
include "correct.csp"

channel Sync: TypeThread.TypeCallParam.TypeReturnParam

Lin(All,me)=(
  Call!me?enqueueCallObj:{|EnqueueCall|} ->
  Sync!me!enqueueCallObj!EnqueueReturn ->
  Return!me!EnqueueReturn ->
  Lin(All,me)
) [] (
  Call!me!DequeueCall ->
  Sync!me!DequeueCall!(DequeueReturn.None) ->
  Return!me!(DequeueReturn.None) ->
  STOP
) [] (
  Call!me!DequeueCall ->
  Sync!me!DequeueCall?EnqueueReturnObj:{|DequeueReturn.Some|} ->
  Return!me!EnqueueReturnObj ->
  Lin(All,me)  
)
LinEvents(All,me)={|Sync.me,Call.me,Return.me|}
Linearizers(All)=((|| me: All @ [LinEvents(All,me)] Lin(All,me)) [|{|Sync|}|] Spec(qNewQueue)) \ {|Sync|}

--The Spec Process
Spec(q)=( length(q)+1<=NQueueCapacity & 
  --A thread performing an enqueue operation
  Sync?t?(EnqueueCall.x):{|EnqueueCall|}!EnqueueReturn ->
  Spec(q^<x>)
) [] ( not qEmpty(q) &
  --A thread performing an dequeue operation, and successfully
  --obtained a return value
  Sync?t!(DequeueCall)!(DequeueReturn.(Some.(head(q)))) ->
  Spec(tail(q))
) [] ( qEmpty(q) & 
  --A thread perfoming an dequeue operation, but all other threads
  --are dequeueing. Every thread returns none exactly once, then
  --system stops. Might be unnecessary?
  Sync?t!DequeueCall!(DequeueReturn.None) ->
  SpecNone(diff(TypeThread,{t}))
)
--Every thread performs returns none exactly once
SpecNone({})=STOP
SpecNone(s)=
  Sync?t:s!DequeueCall!(DequeueReturn.None) ->
  SpecNone(diff(s,{t}))


System1 = runWith(True,True,
  alternate(enqueue(T1,A), dequeue(T1))
)
assert Linearizers({T1}) [T= System1

System2 = runWith(True,True,
  alternate(enqueue(T1,A), dequeue(T1)) |||
  alternate(enqueue(T2,B), dequeue(T2))
)
assert Linearizers({T1,T2}) [T= System2

System3 = runWith(True,True,
  alternate(enqueue(T1,A), dequeue(T1)) |||
  alternate(dequeue(T2), enqueue(T2,B))
)
assert Linearizers({T1,T2}) [T= System3

System4 = runWith(True,True,
  repeatP(enqueue(T1,A) |~| dequeue(T1)) |||
  repeatP(enqueue(T2,B) |~| dequeue(T2))
)
assert Linearizers({T1,T2}) [T= System4

System5 = runWith(True,True,
  repeatP(enqueue(T1,A) |~| dequeue(T1)) |||
  repeatP(enqueue(T2,B) |~| dequeue(T2)) |||
  repeatP(enqueue(T3,C) |~| dequeue(T2))
)
assert Linearizers({T1,T2,T3}) [T= System4
