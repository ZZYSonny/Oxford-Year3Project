include "../common.csp"
include "../correct.csp"
include "queue.csp"
include "lin.csp"

Spec1Thread=Linearizers({T1})
Spec2Thread=Linearizers({T1,T2})
Spec3Thread=Linearizers({T1,T2,T3})
Spec4Thread=Linearizers({T1,T2,T3,T4})
Spec5Thread=Linearizers({T1,T2,T3,T4,T5})

assert Spec2Thread [T= Spec2Thread


InputRegulatorAs(All,cs)=
     Call?t:diff(All,cs)!(EnqueueCall.A) -> InputRegulatorAs(All,cs)
  [] Call?t:diff(All,cs)!(EnqueueCall.B) -> InputRegulatorCs(All)
  [] Call?t:diff(All,cs)!(EnqueueCall.C) -> InputRegulatorAs(All,union(cs,{t}))
InputRegulatorACs(All,cs)=
     Call?t:diff(All,cs)!(EnqueueCall.A) -> InputRegulatorACs(All,cs)
  [] Call?t:diff(All,cs)!(EnqueueCall.C) -> InputRegulatorACs(All,union(cs,{t}))
  [] InputRegulatorCs(All)
InputRegulatorCs(All)=Call?t:All!(EnqueueCall.C) -> InputRegulatorCs(All)

Thread(NThread,me)=
  ([]x:TypeData @ 
    enqueue(NThread,me,x);Thread(NThread,me)
  ) |~| (
    dequeue(NThread,me);Thread(NThread,me)
  )
System(All)=runWith(True,True,
  (||| me:All @ Thread(card(All),me)) 
    [|{Call.t.(EnqueueCall.x) | t<-TypeThread, x<-TypeData}|] 
  InputRegulatorAs({})
)

--Trivial Simple Thread Case
System1=System({T1})
System2=System({T1,T2})
System3=System({T1,T2,T3})
System4=System({T1,T2,T3,T4})
System5=System({T1,T2,T3,T4,T5})

assert System1 [T= System1
assert System2 [T= System2
assert System3 [T= System3

assert Spec1Thread [T= System1
assert Spec2Thread [T= System2
assert Spec3Thread [T= System3
assert Spec4Thread [T= System4
assert Spec5Thread [T= System5