include "../common.csp"
include "../correct.csp"
include "queue.csp"
include "lin.csp"

Spec1Thread=Linearizers({T1})
Spec2Thread=Linearizers({T1,T2})
assert Spec2Thread [T= Spec2Thread


InputRegulatorAs(cs)=
     Call?t:diff(TypeThread,cs)!(EnqueueCall.A) -> InputRegulatorAs(cs)
  [] Call?t:diff(TypeThread,cs)!(EnqueueCall.B) -> InputRegulatorCs
  [] Call?t:diff(TypeThread,cs)!(EnqueueCall.C) -> InputRegulatorAs(union(cs,{t}))
InputRegulatorACs(cs)=
     Call?t:diff(TypeThread,cs)!(EnqueueCall.A) -> InputRegulatorACs(cs)
  [] Call?t:diff(TypeThread,cs)!(EnqueueCall.C) -> InputRegulatorACs(union(cs,{t}))
  [] InputRegulatorCs
InputRegulatorCs=Call?t!(EnqueueCall.C) -> InputRegulatorCs

Thread(me)=
  (|~|x:TypeData @ 
    enqueue(me,x);Thread(me)
  ) |~| (
    dequeue(me);Thread(me)
  )
System(All)=runWith(True,True,
  (||| me:All @ Thread(me)) 
    [|{Call.t.(EnqueueCall.x) | t<-TypeThread, x<-TypeData}|] 
  InputRegulatorAs({})
)
SystemWithSpuriousEvent(All)=runWith(False,True,
  (||| me:All @ Thread(me)) 
    [|{Call.t.(EnqueueCall.x) | t<-TypeThread, x<-TypeData}|] 
  InputRegulatorAs({})
)

--Trivial Simple Thread Case
System1=System({T1})
System1WithSpurious=SystemWithSpuriousEvent({T1})
assert System1 [T= System1
assert System1WithSpurious :[deadlock free]

--Two Thread case
System2=System({T1,T2})
--takes 10-20mins
assert System2 [T= System2
assert Spec2Thread [T= System2
