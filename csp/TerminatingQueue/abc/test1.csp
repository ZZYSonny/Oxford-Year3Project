include "../common.csp"
include "../correct_df.csp"
include "queue.csp"
include "lin.csp"

InputRegulatorAs(All,cs)=
     Call?t:diff(All,cs)!(EnqueueCall.A) -> InputRegulatorAs(All,cs)
  [] Call?t:diff(All,cs)!(EnqueueCall.B) -> InputRegulatorCs(All)
  [] (card(cs)<card(All)-1 &
     Call?t:diff(All,cs)!(EnqueueCall.C) -> InputRegulatorAs(All,union(cs,{t}))
  )
InputRegulatorACs(All,cs)=
     Call?t:diff(All,cs)!(EnqueueCall.A) -> InputRegulatorACs(All,cs)
  [] Call?t:diff(All,cs)!(EnqueueCall.C) -> InputRegulatorACs(All,union(cs,{t}))
  [] InputRegulatorCs(All)
InputRegulatorCs(All)=Call?t:All!(EnqueueCall.C) -> InputRegulatorCs(All)


Thread(NThread,me)=
  ([] x:TypeData @ 
    enqueue(NThread,me,x);Thread(NThread,me)
  ) |~| (
    dequeue(NThread,me);Thread(NThread,me)
  )
SystemWithSpuriousEvent(All)=runWith(False,True,
  (||| me:All @ Thread(card(All),me)) 
    [|{Call.t.(EnqueueCall.x) | t<-TypeThread, x<-TypeData}|] 
  InputRegulatorAs(All,{})
)


System1=SystemWithSpuriousEvent({T1})
System2=SystemWithSpuriousEvent({T1,T2})
System3=SystemWithSpuriousEvent({T1,T2,T3})
System4=SystemWithSpuriousEvent({T1,T2,T3,T4})
System5=SystemWithSpuriousEvent({T1,T2,T3,T4,T5})

assert System1 :[deadlock free]
assert System2 :[deadlock free]
assert System3 :[deadlock free]
assert System4 :[deadlock free]
assert System5 :[deadlock free]
