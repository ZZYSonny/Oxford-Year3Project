include "../common.csp"
include "../queue_abc.csp"
include "correct.csp"
include "lin1.csp"

instance Monitor=ModuleMonitor(TypeThread, True)
QUEUE_ERROR_ACTION = STOP

Spec1Thread=Linearizers({T1})
Spec2Thread=Linearizers({T1,T2})
Spec3Thread=Linearizers({T1,T2,T3})
Spec4Thread=Linearizers({T1,T2,T3,T4})
Spec5Thread=Linearizers({T1,T2,T3,T4,T5})

Thread(NThread,me)= chaosP(
  (|~| x:TypeData @ enqueue(NThread,me,x))
  |~| dequeue(NThread,me)
)
System(All)=runWith(True,True,
  (||| me:All @ Thread(card(All),me)) 
)
SystemNoHide(All)=runWith(False,True,
  (||| me:All @ Thread(card(All),me)) 
)
loop(P)=P;loop(P)
SystemDebug(All)=runWith(False,False,
  (||| me:All @ loop(
    ([] x:TypeData @ enqueue(card(All),me,x))
    [] dequeue(card(All),me)
  )) 
)

System1=System({T1})
System2=System({T1,T2})
System3=System({T1,T2,T3})
System4=System({T1,T2,T3,T4})
System5=System({T1,T2,T3,T4,T5})

assert Spec2Thread [T= System2
assert Spec3Thread [T= System3

assert System({T1,T2}) :[divergence free]
assert System({T1,T2,T3}) :[divergence free]

assert Spec2Thread [F= System2
assert Spec3Thread [F= System3



--- Trace
--  - 2 Queue
--- Divergence free
--  - Allow Spurious, But do not hide spurious
--  - 2 Queue
--- Failure
--  - With Spurious / Without Spurious
--  - Error with DIV
--  - 2 Queue