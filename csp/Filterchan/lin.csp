channel Sync: TypeThreadID.TypeParam.TypeReturn.TypeThreadID.TypeParam.TypeReturn

Spec(All) = 
  Sync?t1:All?(SendParam.x)!(SendReturn)?t2:diff(All,{t1})?recv:{RecvParam.p|p<-findPred(x)}!(RecvReturn.x) -> 
  Spec(All)
  
Lin(All,me)=(
  Call!me?sendparam ->
  Sync!me!(sendparam)!(SendReturn)?other:diff(All,{me})?(recvparam)?(recvreturn) ->
  Return!me!(SendReturn) ->
  Lin(All,me)
) |~| (
  Call!me?recvparam ->
  Sync?other:diff(All,{me})?sendparam?sendreturn!me!recvparam?recvreturn ->
  Return!me!recvreturn ->
  Lin(All,me)
) |~| STOP
LinEvents(All,me)=union({
  ev | ev<-{|Sync|},
  let Sync.t1.a.b.t2.c.d=ev within
    countList(me,<t1,t2>)==1 and member(t1,All) and member(t2,All)
},{|Call.me,Return.me|})
Linearizers(All)= ((|| me: All @ [LinEvents(All,me)] Lin(All,me)) [|{|Sync|}|] Spec(All)) \ {|Sync|}
