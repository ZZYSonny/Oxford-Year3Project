--A slightly simplified version of the linearizer
--by merging the Spec process into individual linearizer process
channel Sync: TypeThreadID.TypeData.(TypeData.TypeData).TypeThreadID.TypeData.(TypeData.TypeData).TypeThreadID.TypeData.(TypeData.TypeData)
--same sync definition

--Linearizer for a process
--With the information from spec process, parameter and return value of ASync
--it is possible to know the parameter and return of BSync and CSync
Lin(All,me)=(
      --me synchronizes as thread A
      Call!me!ASync?a ->
      Sync!me!a?b?c?t2:diff(All,{me})!b!a!c?t3:diff(All,{me,t2})!c!a!b ->
      Return!me!ASync!b!c ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread B
      Call!me!BSync?b ->
      Sync?t2:diff(All,{me})?a!b?c!me!b!a!c?t3:diff(All,{me,t2})!c!a!b ->
      Return!me!BSync!a!c ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread C
      Call!me!CSync?c ->
      Sync?t2:diff(All,{me})?a?b!c?t3:diff(All,{me,t2})!b!a!c!me!c!a!b ->
      Return!me!CSync!a!b ->
      Lin(All,me)
    )

LinEvents(All,me)=union({
  ev | ev<-{|Sync|},
  let Sync.t1.a.b.c.t2.d.e.f.t3.h.i.j=ev within
    countList(me,<t1,t2,t3>)==1
},union({|Call.me,Return.me|}))

Linearizers(All)= (|| me: All @ [LinEvents(All,me)]  Lin(All,me)) \ {|Sync|}