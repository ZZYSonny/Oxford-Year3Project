include "correct.csp"

hide = True
channel Sync: TypeThreadID.TypeData.(TypeData.TypeData).TypeThreadID.TypeData.(TypeData.TypeData).TypeThreadID.TypeData.(TypeData.TypeData)

Spec =
  Sync?aid?a?b?c?bid:diff(TypeThreadID,{aid})!b!a!c?cid:diff(TypeThreadID,{aid,bid})!c!a!b ->
  Spec

--Linearizer for a process
Lin(All,me)=
  let others=diff(All,{me}) within (
      --me synchronizes as thread A
      Call!me!ASync?a ->
      Sync!me!a?b?c?t2?t2b?t2a?t2c?t3?t3c?t3a?t3b ->
      Return!me!ASync!b!c ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread B
      Call!me!BSync?b ->
      Sync?t2?t2b?t2a?t2c!me!b?a?c?t3?t3c?t3a?t3b ->
      Return!me!BSync!a!c ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread C
      Call!me!CSync?c ->
      Sync?t2?t2b?t2a?t2c?t3?t3c?t3a?t3b!me!c?a?b ->
      Return!me!CSync!a!b ->
      Lin(All,me)
    )

--3^12
--Event used by Lin(All,me)
--This set is created for alphabetised synchronization
LinEvents(All,me)=union({
  ev | ev<-{|Sync|},
  let Sync.t1.a.b.c.t2.d.e.f.t3.h.i.j=ev within
    countEqualList(me,<t1,t2,t3>)==1
},union({|Call.me|},{|Return.me|}))
Linearizers(All)= || me: All @ [LinEvents(All,me)] Lin(All,me)

--a thread syncing data A and B alternately
syncWithAB(me,f)=f(me,A);f(me,B);syncWithAB(me,f)
--same thing but B first then A
syncWithBA(me,f)=f(me,B);f(me,A);syncWithAB(me,f)

System1 = runWith(True,
    repeat(syncWithAB(TA,SyncA)) |||
    repeat(syncWithAB(TB,SyncB)) |||
    repeat(syncWithAB(TC,SyncC))
)
Spec1 = Linearizers({TA, TB, TC})
assert Spec1 [T= System1
assert Spec1 [T= Spec1
assert System1 [T= System1


System2 = runWith(True,
    repeat(syncWithAB(TA,SyncA)) |||
    repeat(syncWithAB(TB,SyncB)) |||
    repeat(syncWithAB(TC,SyncC)) |||
    repeat(syncWithAB(TD,SyncA))
)
Spec2 = Linearizers({TA, TB, TC, TD})
assert Spec2 [T= System2


System3 = runWith(True,
    (SyncA(TA,A)) |||
    (SyncB(TB,A);SyncB(TB,B)) |||
    (SyncC(TC,A);SyncC(TC,B)) |||
    (SyncA(TD,A))
)
Spec3 = Linearizers({TA, TB, TC, TD})
assert Spec3 [T= System3