include "correct.csp"
--Simplify sync event using spec
--Still slow
hide = True
channel Sync: TypeThreadID.TypeThreadID.TypeThreadID.TypeData.TypeData.TypeData

--Linearizer for a process
Lin(All,me)= 
  [] a: TypeData @ [] b: TypeData @ [] c: TypeData @
  [] t2: diff(All,{me}) @ [] t3: diff(All,{me,t2}) @ (
      --me synchronizes as thread A
      Call!me!ASync!a ->
      Sync!me!t2!t3!a!b!c ->
      Return!me!ASync!b!c ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread B
      Call!me!BSync!b ->
      Sync!t2!me!t3!a!b!c ->
      Return!me!BSync!a!c ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread C
      Call!me!CSync!c ->
      Sync!t2!t3!me!a!b!c ->
      Return!me!CSync!a!b ->
      Lin(All,me)
    )
LinEvents(All,me)=union({
  e | e <- {|Sync|},
  let Sync.t1.t2.t3.a.b.c=e within
    countEqualList(me,<t1,t2,t3>)>0
},{|Call.me,Return.me|})
Linearizers(All)= (|| me: All @ [LinEvents(All,me)]  Lin(All,me)) \ {|Sync|}

--a thread syncing data A and B alternately
syncWithAB(me,f)=f(me,A);f(me,B);syncWithAB(me,f)
--same thing but B first then A
syncWithBA(me,f)=f(me,B);f(me,A);syncWithAB(me,f)

System1 = runWith(True,
    repeat(syncWithAB(TA,SyncA)) |||
    repeat(syncWithAB(TB,SyncB)) |||
    repeat(syncWithAB(TC,SyncC))
)
Spec1 = Linearizers({TA, TB, TC})
assert Spec1 [T= System1


System2 = runWith(True,
    repeat(syncWithAB(TA,SyncA)) |||
    repeat(syncWithAB(TB,SyncB)) |||
    repeat(syncWithAB(TC,SyncC)) |||
    repeat(syncWithAB(TD,SyncA))
)
Spec2 = Linearizers({TA, TB, TC, TD})
assert Spec2 [T= System2


System3 = runWith(True,
    (SyncA(TA,A)) |||
    (SyncB(TB,A);SyncB(TB,B)) |||
    (SyncC(TC,A);SyncC(TC,B)) |||
    (SyncA(TD,A))
)
Spec3 = Linearizers({TA, TB, TC, TD})
assert Spec3 [T= System3