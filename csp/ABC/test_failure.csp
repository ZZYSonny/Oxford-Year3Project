include "correct.csp"
channel Sync: TypeThreadID.TypeData.(TypeData.TypeData).TypeThreadID.TypeData.(TypeData.TypeData).TypeThreadID.TypeData.(TypeData.TypeData)

Lin(All,me)=
    STOP |~|
    |~| a: TypeData @ |~| b: TypeData @ |~| c: TypeData @
    |~| t2: diff(All,{me}) @ |~| t3: diff(All,{me,t2}) @ 
    (
      --me synchronizes as thread A
      Call!me!ASync!a ->
      Sync!me!a!b!c!t2!b!a!c!t3!c!a!b ->
      Return!me!ASync!b!c ->
      Lin(All,me)
    ) |~| (
      --me synchronizes as thread B
      Call!me!BSync!b ->
      Sync!t2!a!b!c!me!b!a!c!t3!c!a!b ->
      Return!me!BSync!a!c ->
      Lin(All,me)
    ) |~| (
      --me synchronizes as thread C
      Call!me!CSync!c ->
      Sync!t2!a!b!c!t3!b!a!c!me!c!a!b ->
      Return!me!CSync!a!b ->
      Lin(All,me)
    ) 


LinEvents(All,me)=union({
  ev | ev<-{|Sync|},
  let Sync.t1.a.b.c.t2.d.e.f.t3.h.i.j=ev within
    countList(me,<t1,t2,t3>)==1
},union({|Call.me|},{|Return.me|}))

Linearizers(All)= (|| me: All @ [LinEvents(All,me)]  Lin(All,me)) \ {|Sync|}



Thread(me)=chaosP(|~|x:TypeData @ (
    SyncA(me,x) 
|~| SyncB(me,x) 
|~| SyncC(me,x)
))
System(All) = runWith(True, ||| me:All @ Thread(me))

System3=System({T1,T2,T3})
System4=System({T1,T2,T3,T4})
System5=System({T1,T2,T3,T4,T5})

Spec3Thread=Linearizers({T1,T2,T3})
Spec4Thread=Linearizers({T1,T2,T3,T4})
Spec5Thread=Linearizers({T1,T2,T3,T4,T5})

assert Spec3Thread [F= System3
assert Spec4Thread [F= System4
assert Spec5Thread [F= System5


assert Spec3Thread [T= Spec3Thread
assert System3 [T= System3
assert Spec4Thread [T= Spec4Thread
assert System4 [T= System4