include "common.csp"


instance VarA = ModuleUninitVariable(TypeData) 
instance VarB = ModuleUninitVariable(TypeData)
instance VarC = ModuleUninitVariable(TypeData)

instance aClear  = ModuleSemaphore(TypeThreadID, True)
instance bClear  = ModuleSemaphore(TypeThreadID, False)
instance cClear  = ModuleSemaphore(TypeThreadID, False)
instance aSignal = ModuleSemaphore(TypeThreadID, False)
instance bSignal = ModuleSemaphore(TypeThreadID, False)
instance cSignal = ModuleSemaphore(TypeThreadID, False)

runWith(hide,p)=
  VarA::runWith(hide,
  VarB::runWith(hide,
  VarC::runWith(hide,
  aClear::runWith(hide,
  bClear::runWith(hide,
  cClear::runWith(hide,
  aSignal::runWith(hide,
  bSignal::runWith(hide,
  cSignal::runWith(hide,
    p
  )))))))))

SyncA(me,avalue) =
  Call!me!ASync!avalue ->
  --aClear.down
  aClear::downChan!me ->
  --a = me
  VarA::setValue!avalue ->
  --bClear.up
  bClear::upChan!me ->
  --aSignal.down
  aSignal::downChan!me ->
  --(b,c)
  VarB::getValue?b ->
  VarC::getValue?c ->
  --bSignal.up
  bSignal::upChan!me ->
  --result ->
  Return!me!ASync!(b.c) ->
  SKIP

SyncB(me,bvalue) =
  Call!me!BSync!bvalue ->
  --bClear.down
  bClear::downChan!me ->
  --b=me
  VarB::setValue!bvalue ->
  --cClear.up
  cClear::upChan!me ->
  --bSignal.down
  bSignal::downChan!me ->
  --(a,c)
  VarA::getValue?a ->
  VarC::getValue?c ->
  --cSignal.up
  cSignal::upChan!me ->
  --result
  Return!me!BSync!(a.c) ->
  SKIP

SyncC(me,cvalue) =
  Call!me!CSync!cvalue ->
  --cClear.down
  cClear::downChan!me ->
  --c = me
  VarC::setValue!cvalue ->
  --aSignal.up
  aSignal::upChan!me ->
  --cSignal.down
  cSignal::downChan!me ->
  --(a,b)
  VarA::getValue?a ->
  VarB::getValue?b ->
  --aClear.up
  aClear::upChan!me ->
  --result
  Return!me!CSync!(a.b) ->
  SKIP
