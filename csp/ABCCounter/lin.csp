channel Sync: TypeThreadID.TypeThreadID.TypeThreadID.TypeData.TypeData.TypeData.TypeCounter
Lin(All,me)= (
      --me synchronizes as thread A
      Call!me!ASync?a ->
      Sync!me?t2:diff(All,{me})?t3:diff(All,{me,t2})!a?b?c?cnt ->
      Return!me!ASync!b!c!cnt ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread B
      Call!me!BSync?b ->
      Sync?t2:diff(All,{me})!me?t3:diff(All,{me,t2})?a!b?c?cnt ->
      Return!me!BSync!a!c!cnt ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread C
      Call!me!CSync?c ->
      Sync?t2:diff(All,{me})?t3:diff(All,{me,t2})!me?a?b!c?cnt ->
      Return!me!CSync!a!b!cnt ->
      Lin(All,me)
    )
LinEvents(All,me)=union({
  e | e <- {|Sync|},
  let Sync.t1.t2.t3.a.b.c=e within
    countList(me,<t1,t2,t3>)==1
},{|Call.me,Return.me|})

Spec(cnt)=Sync?t1?t2?t3?a?b?c!cnt->Spec((cnt+1)%M)

Linearizers(All)= ((|| me: All @ [LinEvents(All,me)]  Lin(All,me)) [|{|Sync|}|] Spec(0)) \ {|Sync|}