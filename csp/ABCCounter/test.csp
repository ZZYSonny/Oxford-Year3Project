include "faulty.csp"
--Fast, but unusable for spec test
hide = True
channel Sync: TypeThreadID.TypeThreadID.TypeThreadID.TypeData.TypeData.TypeData.TypeCounter
--Linearizer for a process
Lin(All,me)= (
      --me synchronizes as thread A
      Call!me!ASync?a ->
      Sync!me?t2:diff(All,{me})?t3:diff(All,{me,t2})!a?b?c?cnt ->
      Return!me!ASync!b!c!cnt ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread B
      Call!me!BSync?b ->
      Sync?t2:diff(All,{me})!me?t3:diff(All,{me,t2})?a!b?c?cnt ->
      Return!me!BSync!a!c!cnt ->
      Lin(All,me)
    ) [] (
      --me synchronizes as thread C
      Call!me!CSync?c ->
      Sync?t2:diff(All,{me})?t3:diff(All,{me,t2})!me?a?b!c?cnt ->
      Return!me!CSync!a!b!cnt ->
      Lin(All,me)
    )
LinEvents(All,me)=union({
  e | e <- {|Sync|},
  let Sync.t1.t2.t3.a.b.c=e within
    countEqualList(me,<t1,t2,t3>)==1
},{|Call.me,Return.me|})
Spec(cnt)=Sync?t1?t2?t3?a?b?c!cnt->Spec((cnt+1)%M)
Linearizers(All)= ((|| me: All @ [LinEvents(All,me)]  Lin(All,me)) [|{|Sync|}|] Spec(0)) \ {|Sync|}

--a thread syncing data A and B alternately
syncWithAB(me,f)=f(me,A);f(me,B);syncWithAB(me,f)
--same thing but B first then A
syncWithBA(me,f)=f(me,B);f(me,A);syncWithAB(me,f)

System1 = runWith(True,
    repeat(syncWithAB(TA,SyncA)) |||
    repeat(syncWithAB(TB,SyncB)) |||
    repeat(syncWithAB(TC,SyncC))
)
Spec1 = Linearizers({TA, TB, TC})
assert Spec1 [T= System1
assert System1 :[deadlock free]

System2 = runWith(True,
    repeat(syncWithAB(TA,SyncA)) |||
    repeat(syncWithAB(TB,SyncB)) |||
    repeat(syncWithAB(TC,SyncC)) |||
    repeat(syncWithAB(TD,SyncA))
)
Spec2 = Linearizers({TA, TB, TC, TD})
assert Spec2 [T= System2
assert System2 :[deadlock free]

System3 = runWith(True,
    (SyncA(TA,A)) |||
    (SyncB(TB,A);SyncB(TB,B)) |||
    (SyncC(TC,A);SyncC(TC,B)) |||
    (SyncA(TD,A))
)
Spec3 = Linearizers({TA, TB, TC, TD})
assert Spec3 [T= System3