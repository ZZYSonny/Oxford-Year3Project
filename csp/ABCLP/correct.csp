include "common.csp"


instance VarA = AUninitVariable(TypeData) 
instance VarB = BUninitVariable(TypeData)
instance VarC = CUninitVariable(TypeData)

instance aClear  = ModuleSemaphore(TypeThreadID, True)
instance bClear  = ModuleSemaphore(TypeThreadID, False)
instance cClear  = ModuleSemaphore(TypeThreadID, False)
instance aSignal = ModuleSemaphore(TypeThreadID, False)
instance bSignal = ModuleSemaphore(TypeThreadID, False)
instance cSignal = ModuleSemaphore(TypeThreadID, False)

runWith(hide,p)=
  VarA::runWith(hide,
  VarB::runWith(hide,
  VarC::runWith(hide,
  aClear::runWith(hide,
  bClear::runWith(hide,
  cClear::runWith(hide,
  aSignal::runWith(hide,
  bSignal::runWith(hide,
  cSignal::runWith(hide,
    p
  )))))))))

SyncA(me,avalue) =
  --aClear.down
  aClear::downChan!me ->
  --a = me
  --VarA::setValue!avalue ->
  SP1!me!avalue ->
  --bClear.up
  bClear::upChan!me ->
  --aSignal.down
  aSignal::downChan!me ->
  --(b,c)
  --VarB::getValue?b ->
  --VarC::getValue?c ->
  SP4!me?b?c ->
  --bSignal.up
  bSignal::upChan!me ->
  SKIP

SyncB(me,bvalue) =
  --bClear.down
  bClear::downChan!me ->
  --b=me
  --VarB::setValue!bvalue ->
  SP2!me!bvalue->
  --cClear.up
  cClear::upChan!me ->
  --bSignal.down
  bSignal::downChan!me ->
  --(a,c)
  --VarA::getValue?a ->
  --VarC::getValue?c ->
  SP5!me?a?c ->
  --cSignal.up
  cSignal::upChan!me ->
  SKIP

SyncC(me,cvalue) =
  --cClear.down
  cClear::downChan!me ->
  --c = me
  --VarC::setValue!cvalue ->
  SP3!me!cvalue ->
  --aSignal.up
  aSignal::upChan!me ->
  --cSignal.down
  cSignal::downChan!me ->
  --(a,b)
  --VarA::getValue?a ->
  --VarB::getValue?b ->
  SP6!me?a?b ->
  --aClear.up
  aClear::upChan!me ->
  SKIP


Spec(All) = 
    SP1?t1:All?a ->
    SP2?t2:All?b ->
    SP3?t3:All?c ->
    SP4!t1!b!c ->
    SP5!t2!a!c ->
    SP6!t3!a!b ->
    Spec(All)