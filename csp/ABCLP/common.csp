include "../lib/common.csp"
include "../lib/variable.csp"
include "../lib/semaphore.csp"
datatype TypeThreadID = T1 | T2 | T3 | T4 | T5
datatype TypeData = A | B
datatype TypeOps = ASync | BSync | CSync

channel SP1: TypeThreadID.TypeData
channel SP2: TypeThreadID.TypeData
channel SP3: TypeThreadID.TypeData
channel SP4: TypeThreadID.TypeData.TypeData
channel SP5: TypeThreadID.TypeData.TypeData
channel SP6: TypeThreadID.TypeData.TypeData

spec(All) = 
    SP1?t1:All?a ->
    SP2?t2:diff(All,{t1})?b ->
    SP3?t3:diff(All,{t1,t2})?c ->
    SP4!t1!b!c ->
    SP5!t2!a!c ->
    SP6!t3!a!b ->
    spec(All)

module AUninitVariable(TypeValue)
  Var(a) = SP1?t?newa -> Var(newa)
        [] SP5?t!a?b -> Var(a)
        [] SP6?t!a?c -> Var(a)
  chanset = {|SP1, SP5, SP6|}
exports
  runWith(hide,P) = ((|~| x:TypeValue @ Var(x)) [| chanset |] P) \ 
                    (if hide then chanset else {})
endmodule


module BUninitVariable(TypeValue)
  Var(b) = SP2?t?newb -> Var(newb)
        [] SP4?t!b?c -> Var(b)
        [] SP6?t?a!b -> Var(b)
  chanset = {|SP2, SP4, SP6|}
exports
  runWith(hide,P) = ((|~| x:TypeValue @ Var(x)) [| chanset |] P) \ 
                    (if hide then chanset else {})
endmodule

module CUninitVariable(TypeValue)
  Var(c) = SP3?t?newc -> Var(newc)
        [] SP4?t?b!c -> Var(c)
        [] SP5?t?a!c -> Var(c)
  chanset = {|SP3, SP4, SP5|}
exports
  runWith(hide,P) = ((|~| x:TypeValue @ Var(x)) [| chanset |] P) \ 
                    (if hide then chanset else {})
endmodule
