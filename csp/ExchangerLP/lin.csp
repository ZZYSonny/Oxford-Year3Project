channel Sync: TypeThreadID. TypeData. TypeData. TypeThreadID. TypeData. TypeData
-- Thread1: thread identity, function parameter, function return
-- Thread2: thread identity, function parameter, function return

-- Spec Process. 
Spec = Sync?ta?aparam?areturn?tb:diff(TypeThreadID,{ta})!areturn!aparam -> Spec

--Linearizer for a process, only accept Sync event regarding me between Call and Return
Lin(All,me)=
  Call!me?meparam -> ((
      Sync!me!meparam?mereturn?other?oparam?oreturn ->
      Return!me!mereturn ->
      Lin(All,me)
    )[](
      Sync?other?oparam?oreturn!me!meparam?mereturn ->
      Return!me!mereturn ->
      Lin(All,me)
  ))
LinEvents(All,me)=union({
  e | e <- {|Sync|},
  let Sync.t1.a.b.t2.c.d=e within
    countList(me,<t1,t2>)==1
},{|Call.me,Return.me|})
Linearizers(All)= ((|| me: All @ [LinEvents(All,me)] Lin(All,me)) [|{|Sync|}|] Spec) \ {|Sync|}
