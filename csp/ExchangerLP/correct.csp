include "common.csp"

instance Monitor = ModuleMonitor(TypeThreadID)
instance Step = ModuleVariable({0,1,2}, 0)
instance Data = ModuleUninitVariable(TypeData)

channel P1 : TypeThreadID. TypeData            --meid, datasend
channel P2 : TypeThreadID. TypeData. TypeData  --meid, datasend, res
channel P1': TypeThreadID. TypeData. TypeData  --meid, datasend, res

Spec(All) =
  P1?t1:All?t1data ->
  P2?t2:diff(All,{t1})?t2data!t1data ->
  P1'!t1!t1data!t2data ->
  Spec(All)

exchange(me,datasend) = 
  --Enter Synchronized
  Monitor::enter(me);
    --while(step == 2) wait()
    Monitor::whileWait(me, \ktrue,kfalse @
      Step::getValue?step ->
      if step==2 then ktrue else kfalse
    );
    --if(step == 0)
    Step::getValue?step -> if step==0 then (
      --data = x;
      Data::setValue!datasend -> 
      --step = 1;
      Step::setValue!1 ->
      --LP
      P1!me!datasend ->
      --while(step == 1) wait()
      Monitor::whileWait(me, \ktrue,kfalse @
        Step::getValue?step ->
        if step==1 then ktrue else kfalse
      );
      --assert(step == 2)
      Step::getValue?step ->
      if step!=2 then div else
      --step = 0
      Step::setValue!0 ->
      --data
      Data::getValue?res ->(
      --LP
      P1'!me!datasend!res ->
      --notifyAll()
      Monitor::notifyAll(me);
      --Exit Monitor
      Monitor::exit(me)
    ))else(
      --val result = data;
      Data::getValue?res -> (
      --data = x;
      Data::setValue!datasend ->
      --step = 2; 
      Step::setValue!2 ->
      --LP
      P2!me!datasend!res ->
      --notifyAll()
      Monitor::notifyAll(me);
      --Exit Monitor
      Monitor::exit(me)
    ))

runWith(hideSpurious, hideInternal, p)=
  Monitor::runWith(hideSpurious, hideInternal,
  Step::runWith(hideInternal,
  Data::runWith(hideInternal,
    p
  )))
