include "common.csp"

instance VarSeqNumber = ModuleVariable({0..M},0)
instance VarCount = ModuleVariable({0..NThread},0)
instance VarLeaving = ModuleVariable(Bool,False)
instance Monitor = ModuleMonitor(TypeThreadID)

runWith(hideSpurious,hideInternal,p)=
  VarSeqNumber::runWith(hideInternal,
  VarCount::runWith(hideInternal,
  VarLeaving::runWith(hideInternal,
  Monitor::runWith(hideSpurious,hideInternal,
    p
  ))))

sync(me)=
  Call!me ->
  --synchronized
  Monitor::enter(me);
    --while(leaving) wait()
    Monitor::whileWait(me, \ktrue,kfalse @
      VarLeaving::getValue?leaving ->
      if leaving then ktrue else kfalse
    );
    --count+=1
    VarCount::getValue?x ->
    if x==NThread then DIV else
    VarCount::setValue!(x+1) -> (
    --if(count==NThread)
    if x+1==NThread then (
      --leaving=true
      VarLeaving::setValue!True ->
      --count-=1
      VarCount::setValue!x ->
      --notifyAll()
      Monitor::notifyAll(me);
      --seqNumber
      VarSeqNumber::getValue?ans->(
        Monitor::exit(me);
        Return!me!ans ->
        SKIP
      )
    ) else (
      --while(!leaving) wait()
      Monitor::whileWait(me, \ktrue,kfalse @
        VarLeaving::getValue?leaving ->
        if (not leaving) then ktrue else kfalse
      );
      --count-=1
      VarCount::getValue?y -> 
      if y==0 then DIV else
      VarCount::setValue!y-1 ->
      --if(count==0)
      if(y-1==0) then (
        --leaving=false
        VarLeaving::setValue!False ->
        --notifyAll()
        Monitor::notifyAll(me);
        --seqNumber+=1
        VarSeqNumber::getValue?z ->
        VarSeqNumber::setValue!((z+1)%M) ->
        --seqNumber-1
        VarSeqNumber::getValue?ans->(
          Monitor::exit(me);
          Return!me!z ->
          SKIP
        )
      ) else (
        --seqNumber
        VarSeqNumber::getValue?ans->(
          Monitor::exit(me);
          Return!me!ans ->
          SKIP
        )
      )
    )
  )


