include "common.csp"

instance VarSeqNumber = ModuleVariable({0..M},0)
instance VarWaiting = ModuleVariable({0..NThread},0)
instance WaitSem = ModuleSignallingSemaphore(TypeThreadID)
instance Mutex = ModuleMutexSemaphore(TypeThreadID)

runWith(hideSpurious,hideInternal,p)=
  VarSeqNumber::runWith(hideInternal,
  VarWaiting::runWith(hideInternal,
  WaitSem::runWith(hideInternal,
  Mutex::runWith(hideInternal,
    p
  ))))

sync(me)=
  Call!me ->
  --mutex.down
  Mutex::downChan!me ->
  --val result = seqNumber
  VarSeqNumber::getValue?result -> (
    --if(waiting==NThread-1)
    VarWaiting::getValue?x -> (
    if x==NThread-1 then (
      --waitSem.up
      WaitSem::upChan!me ->
      SKIP
    ) else (
      --waiting+=1
      if x==NThread then DIV else
      VarWaiting::setValue!(x+1) ->
      --mutex.up
      Mutex::upChan!me ->
      --waitSem.down
      WaitSem::downChan!me ->
      --waiting-=1
      VarWaiting::getValue?y ->
      if y==0 then DIV else
      VarWaiting::setValue!(y-1) ->
      if y-1==0 then (
        --seqNumber+=1
        VarSeqNumber::getValue?z ->
        VarSeqNumber::setValue!((z+1)%M) ->
        --mutex.up
        Mutex::upChan!me ->
        SKIP
      ) else (
        --waitSem.up
        WaitSem::upChan!me ->
        SKIP
      )
    ));
    --result
    Return!me!result ->
    SKIP
  )
  
