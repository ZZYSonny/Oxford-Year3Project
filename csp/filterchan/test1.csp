include "./faulty.csp"
hide = True
--System1 = 
--  Monitor::runWith(hide,hide,
--  Full::runWith(hide,
--  Data::runWith(hide,
--    send(S1,A) |||
--    send(S2,B) ||| 
--    receive(R1,IsA) |||
--    receive(R2,IsB)
--  )))

channel Sync: TypeThreadID.TypeParam.TypeReturn.TypeThreadID.TypeParam.TypeReturn

Spec = |~| x: TypeData @ |~| p: findPred(x) @
  Sync?sendid!(SendParam.x)!(SendReturn)?recvid!(RecvParam.p)!(RecvReturn.x) ->
  Spec
  
Lin0(All,me)=
  let others=diff(All,{me}) within(
    [] x: TypeData @
      Call!me!(SendParam.x) ->
      Sync!me!(SendParam.x)!(SendReturn)?other:others?recvparam?recvreturn ->
      Return!me!(SendReturn) ->
      Lin0(All,me)
  ) [] (
    [] x: TypeData @ [] p: TypePred @
      Call!me!(RecvParam.p) ->
      Sync?other:others?sendparam?sendreturn!me!(RecvParam.p)!(RecvReturn.x) ->
      Return!me!(RecvReturn.x) ->
      Lin0(All,me)
  )
Lin1(All,me) = Lin0(All,me) |||
  let others=diff(All,{me}) within repeatP(
    Sync?ta:others?sendparam?sendreturn?tb:others?recvparam?recvreturn -> SKIP
  )
Linearizers(All)= ([|{|Sync|}|] me:All @ Lin1(All,me))

--Test for 1 sender and 1 receiver
System1 = 
  Monitor::runWith(hide,hide,
  Full::runWith(hide,
  Data::runWith(hide,
    repeatP(send(S1,A)) |||
    repeatP(receive(R1,IsA))
  )))
Spec1 = (Linearizers({S1,R1}) [|{|Sync|}|] Spec) \ {|Sync|}
assert Spec1 [T= System1

--Test for 1 sender and 1 receiver
System2 = 
  Monitor::runWith(hide,hide,
  Full::runWith(hide,
  Data::runWith(hide,
    repeatP(send(S1,A)) |||
    repeatP(send(S2,B)) |||
    repeatP(receive(R1,IsA)) |||
    repeatP(receive(R2,IsB))
  )))
Spec2 = (Linearizers({S1,S2,R1,R2}) [|{|Sync|}|] Spec) \ {|Sync|}
assert Spec2 [T= System2