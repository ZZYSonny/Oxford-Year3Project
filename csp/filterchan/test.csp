include "./correct.csp"
hide = True
channel Sync: TypeThreadID.TypeParam.TypeReturn.TypeThreadID.TypeParam.TypeReturn

Spec = |~| x: TypeData @ |~| p: findPred(x) @
  Sync?sendid!(SendParam.x)!(SendReturn)?recvid!(RecvParam.p)!(RecvReturn.x) ->
  Spec
  
Lin0(All,me)=
  let others=diff(All,{me}) within(
    [] x: TypeData @
      Call!me!(SendParam.x) ->
      Sync!me!(SendParam.x)!(SendReturn)?other:others?recvparam?recvreturn ->
      Return!me!(SendReturn) ->
      Lin0(All,me)
  ) [] (
    [] x: TypeData @ [] p: TypePred @
      Call!me!(RecvParam.p) ->
      Sync?other:others?sendparam?sendreturn!me!(RecvParam.p)!(RecvReturn.x) ->
      Return!me!(RecvReturn.x) ->
      Lin0(All,me)
  )
Lin1(All,me) = Lin0(All,me) |||
  let others=diff(All,{me}) within repeatP(
    Sync?ta:others?sendparam?sendreturn?tb:others?recvparam?recvreturn -> SKIP
  )
Linearizers(All)= ([|{|Sync|}|] me:All @ Lin1(All,me))

----------------------------------
--Test for 1 sender and 1 receiver
--Where the sender always send A
--The receiver always receive A
System1 = runWith(True,
  repeatP(send(S1,A)) |||
  repeatP(receive(R1,IsA))
)
Spec1 = (Linearizers({S1,R1}) [|{|Sync|}|] Spec) \ {|Sync|}
assert Spec1 [T= System1

----------------------------------
--Test for 2 sender and 2 receiver
--Where one sender always send A, the other always send B
--One receiver always receive A, the other always receive B
System2 = runWith(True,
  repeatP(send(S1,A)) |||
  repeatP(send(S2,B)) |||
  repeatP(receive(R1,IsA)) |||
  repeatP(receive(R2,IsB))
)
Spec2 = (Linearizers({S1,S2,R1,R2}) [|{|Sync|}|] Spec) \ {|Sync|}
assert Spec2 [T= System2

----------------------------------
--Test for 2 sender and 2 receiver
--Where two sender non deterministically send A or B
--Two receiver non deterministically receive A or B
senderWorker(me) = repeatP(|~| x:TypeData @ send(me,x);SKIP)
receiverWorker(me) = repeatP(|~| p:TypePred @ receive(me,p);SKIP)
System3 = runWith(True,
  senderWorker(S1) |||
  senderWorker(S2) |||
  receiverWorker(R1) |||
  receiverWorker(R2)
)
Spec3 = (Linearizers({S1,S2,R1,R2}) [|{|Sync|}|] Spec) \ {|Sync|}
assert Spec3 [T= System3
