include "../lib/monitor_dbg.csp"
include "../lib/variable.csp"

--Def thread
datatype TypeThreadID = S1 | S2 | R1 | R2
datatype TypeData = A | B
isA(x) = x==A
isB(x) = x==B

instance Monitor = ModuleMonitor(TypeThreadID)
instance Full = VariableMin(Bool, False)
instance Data = VariableMin(TypeData, A)

--------- Filter Chan
channel sendStart, receiveReturn: TypeThreadID. TypeData

send(me, x) = Monitor::synchronized(me,
  --line1
  Monitor::whileWait(me, \ktrue,kfalse @
    Full::getValue?full ->
    if full then ktrue else kfalse
  );
  --line2
  Data::setValue!x ->
  Full::setValue!True ->
  sendStart.me.x -> 
  Monitor::notifyAll(me);
  --line3
  Monitor::whileWait(me, \ktrue,kfalse @
    Full::getValue?full ->
    if full then ktrue else kfalse
  )
)

receive(me, p) = Monitor::synchronized(me,
  --line1
  Monitor::whileWait(me, \ktrue,kfalse @
    Full::getValue?full ->
    Data::getValue?data ->
    if (not full) or (not p(data)) then ktrue else kfalse
  );
  --line2
  Full::setValue!False ->
  Data::getValue?result ->
  receiveReturn!me!result -> 
  --line3
  Monitor::notifyAll(me)
)

repeat(P) = P; repeat(P)

hide=True

System1 = 
  Monitor::runwith(hide,
  Full::runwith(hide,
  Data::runwith(hide,
    send(S1,A) |||
    send(S2,B) ||| 
    receive(R1,isA) |||
    receive(R2,isB)
  )))

spec1 = 
  sendStart.S1.A -> receiveReturn.R1.A -> sendStart.S2.B -> receiveReturn.R2.B -> STOP []
  sendStart.S2.B -> receiveReturn.R2.B -> sendStart.S1.A -> receiveReturn.R1.A -> STOP

assert System1 :[deadlock free]
--Fails because of repetitive spurious wakeup

assert spec1 [T= System1
assert System1 [T= spec1

System2 = 
  Monitor::runwith(hide,
  Full::runwith(hide,
  Data::runwith(hide,
    repeat(send(S1,A)) |||
    repeat(send(S2,B)) ||| 
    repeat(receive(R1,isA)) |||
    repeat(receive(R2,isB))
  )))



spec2 = 
  sendStart.S1.A -> receiveReturn.R1.A -> spec2 []
  sendStart.S2.B -> receiveReturn.R2.B -> spec2

assert spec2 [T= System2
assert System2 [T= spec2