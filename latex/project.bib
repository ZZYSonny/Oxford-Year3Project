@book{ucs-book,
author = {Roscoe, A.W.},
year = {2011},
month = {01},
pages = {},
title = {Understanding Concurrent Systems},
isbn = {978-1-84882-257-3},
journal = {Understanding Concurrent Systems: , Texts in Computer Science, ISBN 978-1-84882-257-3. Springer-Verlag London Limited, 2011},
doi = {10.1007/978-1-84882-258-0}
}


@article{linearizability-testing,
  title = "Testing for Linearizability",
  author = "Gavin Lowe",
  year = "2017",
  journal = "Concurrency and Computation: Practice and Experience",
  number = "4",
  volume = "29",
}


@incollection{lock-free-queue-analysis,
  title = "Analysing Lock-Free Linearizable Datatypes Using CSP",
  author = "Gavin Lowe",
  year = "2017",
  booktitle = "Concurrency, Security and Puzzles: Essays Dedicated to Andrew William Roscoe on the Occasion of His 60th Birthday",
  editor = "Thomas Gibson-Robinson and Philippa Hopcroft and Ranko Lazi\'c",
  publisher = "Springer",
  series = "LNCS",
  volume = "10160",
}

@inproceedings{threadsanitizer,
  title={ThreadSanitizer: data race detection in practice},
  author={Serebryany, Konstantin and Iskhodzhanov, Timur},
  booktitle={Proceedings of the workshop on binary instrumentation and applications},
  pages={62--71},
  year={2009}
}

@Article{ABC,
author={Lowe, Gavin},
title={Parameterized verification of systems with component identities, using view abstraction},
journal={International Journal on Software Tools for Technology Transfer},
year={2022},
month={Apr},
day={01},
volume={24},
number={2},
pages={287-324},
abstract={The parameterized verification problem seeks to verify all members of some collection of systems. We consider the parameterized verification problem applied to systems that are composed of an arbitrary number of component processes, together with some fixed processes. The components are taken from one or more families, each family representing one role in the system; all components within a family are symmetric to one another. Processes communicate via synchronous message passing. In particular, each component process has an identity, which may be included in messages, and passed to third parties. We extend Abdulla et al.'s technique of view abstraction, together with techniques based on symmetry reduction, to this setting. We give an algorithm and implementation that allows such systems to be verified for an arbitrary number of components: we do this for both safety and deadlock-freedom properties. We apply the techniques to a number of examples. We can model both active components, such as threads, and passive components, such as nodes in a linked list: thus our approach allows the verification of unbounded concurrent datatypes operated on by an unbounded number of threads. We show how to combine view abstraction with additional techniques in order to deal with other potentially infinite aspects of the analysis: for example, we deal with potentially infinite specifications, such as a datatype being a queue; and we deal with unbounded types of data stored in a datatype.},
issn={1433-2787},
doi={10.1007/s10009-022-00648-0},
url={https://doi.org/10.1007/s10009-022-00648-0}
}

@book{CPinJava,
author = {Lea, Douglas},
title = {Concurrent Programming in Java(TM): Design Principles and Patterns (3rd Edition) (Java (Addison-Wesley))},
year = {2006},
isbn = {0321256174},
publisher = {Addison-Wesley Professional}
}