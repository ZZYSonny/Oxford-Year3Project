@book{ucs-book,
author = {A.W. Roscoe},
title = {Understanding Concurrent Systems},
year = {2010},
isbn = {184882257X},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
edition = {1st},
doi = {10.5555/1941861},
abstract = {CSP notation has been used extensively for teaching and applying concurrency theory, ever since the publication of the text Communicating Sequential Processes by C.A.R. Hoare in 1985. Both a programming language and a specification language, the theory of CSP helps users to understand concurrent systems, and to decide whether a program meets its specification. As a member of the family of process algebras, the concepts of communication and interaction are presented in an algebraic style. An invaluable reference on the state of the art in CSP, Understanding Concurrent Systems also serves as a comprehensive introduction to the field, in addition to providing material for a number of more advanced courses. A first point of reference for anyone wanting to use CSP or learn about its theory, the book also introduces other views of concurrency, using CSP to model and explain these. The text is fully integrated with CSP-based tools such as FDR, and describes how to create new tools based on FDR. Most of the book relies on no theoretical background other than a basic knowledge of sets and sequences. Sophisticated mathematical arguments are avoided whenever possible. Topics and features: presents a comprehensive introduction to CSP; discusses the latest advances in CSP, covering topics of operational semantics, denotational models, finite observation models and infinite-behaviour models, and algebraic semantics; explores the practical application of CSP, including timed modelling, discrete modelling, parameterised verifications and the state explosion problem, and advanced topics in the use of FDR; examines the ability of CSP to describe and enable reasoning about parallel systems modelled in other paradigms; covers a broad variety of concurrent systems, including combinatorial, timed, priority-based, mobile, shared variable, statecharts, buffered and asynchronous systems; contains exercises and case studies to support the text; supplies further tools and information at the associated website: http://www.comlab.ox.ac.uk/ucs/. From undergraduate students of computer science in need of an introduction to the area, to researchers and practitioners desiring a more in-depth understanding of theory and practice of concurrent systems, this broad-ranging text/reference is essential reading for anyone interested in Hoares CSP.}
}

@article{linearizability-testing,
  title = "Testing for Linearizability",
  author = "Gavin Lowe",
  year = "2017",
  journal = "Concurrency and Computation: Practice and Experience",
  number = "4",
  volume = "29",
}


@incollection{lock-free-queue-analysis,
  title = "Analysing Lock-Free Linearizable Datatypes Using CSP",
  author = "Gavin Lowe",
  year = "2017",
  booktitle = "Concurrency, Security and Puzzles: Essays Dedicated to Andrew William Roscoe on the Occasion of His 60th Birthday",
  editor = "Thomas Gibson-Robinson and Philippa Hopcroft and Ranko Lazi\'c",
  publisher = "Springer",
  series = "LNCS",
  volume = "10160",
}

@inproceedings{threadsanitizer,
  title={ThreadSanitizer: data race detection in practice},
  author={Serebryany, Konstantin and Iskhodzhanov, Timur},
  booktitle={Proceedings of the workshop on binary instrumentation and applications},
  pages={62--71},
  year={2009}
}

@Article{ABC,
author={Lowe, Gavin},
title={Parameterized verification of systems with component identities, using view abstraction},
journal={International Journal on Software Tools for Technology Transfer},
year={2022},
month={Apr},
day={01},
volume={24},
number={2},
pages={287-324},
abstract={The parameterized verification problem seeks to verify all members of some collection of systems. We consider the parameterized verification problem applied to systems that are composed of an arbitrary number of component processes, together with some fixed processes. The components are taken from one or more families, each family representing one role in the system; all components within a family are symmetric to one another. Processes communicate via synchronous message passing. In particular, each component process has an identity, which may be included in messages, and passed to third parties. We extend Abdulla et al.'s technique of view abstraction, together with techniques based on symmetry reduction, to this setting. We give an algorithm and implementation that allows such systems to be verified for an arbitrary number of components: we do this for both safety and deadlock-freedom properties. We apply the techniques to a number of examples. We can model both active components, such as threads, and passive components, such as nodes in a linked list: thus our approach allows the verification of unbounded concurrent datatypes operated on by an unbounded number of threads. We show how to combine view abstraction with additional techniques in order to deal with other potentially infinite aspects of the analysis: for example, we deal with potentially infinite specifications, such as a datatype being a queue; and we deal with unbounded types of data stored in a datatype.},
issn={1433-2787},
doi={10.1007/s10009-022-00648-0},
url={https://doi.org/10.1007/s10009-022-00648-0}
}

@book{CPinJava,
author = {Lea, Douglas},
title = {Concurrent Programming in Java(TM): Design Principles and Patterns (3rd Edition) (Java (Addison-Wesley))},
year = {2006},
isbn = {0321256174},
publisher = {Addison-Wesley Professional}
}

@inproceedings{fdr,
   title={{FDR3 --- A Modern Refinement Checker for CSP}},
   author={Thomas Gibson-Robinson and Philip Armstrong and Alexandre Boulgakov and A.W. Roscoe},
   booktitle={Tools and Algorithms for the Construction and Analysis of Systems},
   year = {2014},
   pages = {187-201},
   volume={8413},
   series={Lecture Notes in Computer Science},
   editor={Ábrahám, Erika and Havelund, Klaus},
}

@manual{fdrmanual,
   title={{Failures Divergences Refinement (FDR) Version 3}},
   author={Thomas Gibson-Robinson and Philip Armstrong, Alexandre Boulgakov and A.W. Roscoe},
   year={2013},
   url={https://www.cs.ox.ac.uk/projects/fdr/},
}

@misc{ObjectRepo,
  author = {Gavin Lowe},
  title = {SynchronisationLinearisation},
  year = {2021},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/GavinLowe1967/SynchronisationLinearisation}}
}